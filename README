TPM 1.2
=======

This feature enables tpm 1.2 support, including kernel option changes to
enable tpm drivers, and picking up packages trousers, tpm-tools,
openssl-tpm-engine, tpm-quote-tools.

Note:
This feature is not fully validated.

Build
=====

In order to enable this feature, add the path to
feature/tpm/template.conf to the init script.

Dependency
==========

This feature doesn't depend on other layer or template.

TPM 1.2 packages
================
The following open-source packages are supported for TPM 1.2.

trousers v0.3.13
----------------
TrouSerS is an implementation of the Trusted Computing Group's Software Stack
(TSS) specification. You can use Trousers to write applications that make use
of your TPM hardware. See homepage:
    http://trousers.sourceforge.net/

Visit TCG official website for TSS API specification:
    http://www.trustedcomputinggroup.org

tpm-tools v1.3.8
----------------
The tpm-tools package contains commands to allow the platform administrator
the ability to manage and diagnose the platform TPM.  Additionally, the
package contains commands to utilize some of the capabilities available
in the TPM. See the tools manual pages in package for usage of the tools.

openssl-tpm-engine v0.4.2
-------------------------
openssl-tpm-engine is an OpenSSL secure engine based on TPM hardware.
For more information and how to use, see README in package source.

tpm-quote-tools v1.0.2
----------------------
The TPM Quote Tools is a collection of programs that provide support
for TPM based attestation using the TPM quote mechanism. The manual
page for tpm_quote_tools provides a usage overview.

tss-testsuite v0.3
------------------
TSS api test suite for testing trousers and the underlay TPM.
For more information and how to use, see README in package source.

How to use TPM 1.2
==================
For TPM 1.2, the following typical steps can be performed to get the TPM
ready for use:

1. Clear and enable TPM from the BIOS.

2. Take TPM ownership.
     # tpm_takeownership -y -z

3. Change owner and SRK passwords. These password are used for the
   access permission to other functions including generate keys.
     # tpm_changeownerauth -z -s -o

Then, you can use the TPM for a specific need, such as key generation,
sealing encrypted data, etc.

openssl tpm engine for TPM 1.2
==============================
openssl-tpm-engine package provides tpm engine lib for openssl applications.
It is an interface between openssl applications and TPM hardware.

1. Wrap software key using the TPM engine
(1). If tpm is not owned, run "tpm_takeownership -y -z".
     This also set tpm SRK and Owner password to well-known key.
     You can then run tpm_changeownerauth to set new SRK and Owner password.
     To reset SRK and Owner password to well-known key, run "tpm_changeownerauth -r -s -o".

(2). Generate tpm hardware key: (add -z for using well-known key)
     $ create_tpm_key rootkey.pem [-z]

(3). Wrap software key into TPM storage:
     $ openssl genrsa -out softkey.pem 1024
     $ create_tpm_key -w softkey.pem -s 1024 rootkey.pem [-z]

2. Create a self-signed cert using the TPM engine
(1). Generate a TPM key and write it to a file:
 $ create_tpm_key <keyfilename>

(2). Make the openssl certificate request:
 $ openssl req -keyform engine -engine tpm -key <keyfilename> -new -x509 -days 365 -out <certfilename>

3. How to use tpm engine lib
The name of tpm engine library is libtpm.so.
There is an enhencement to the original opensource code.
Add an additional way to pass SRK passwork to libtpm.so,
that is using environment variable "TPM_SRK_PW".
For example:
	env TPM_SRK_PW=xxx openssl s_server ...

Note:
  -"env TPM_SRK_PW=#WELLKNOWN#" is used to pass well-known key.
  -Detail description about openssl-tpm-engine, please refer to the README in source code.
